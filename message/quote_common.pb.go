// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.3
// source: quote_common.proto

// update 0.2 2024.08.30

package message

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// IncrementOrderBookInfo 表示增量订单簿信息
type DepthInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp        int64         `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                           // 时间戳，表示该信息的事件时间
	TransTs          int64         `protobuf:"varint,2,opt,name=trans_ts,json=transTs,proto3" json:"trans_ts,omitempty"`                                // 交易时间戳
	FirstUpdateId    int64         `protobuf:"varint,3,opt,name=first_update_id,json=firstUpdateId,proto3" json:"first_update_id,omitempty"`            // 第一个更新的订单簿ID
	LastUpdateId     int64         `protobuf:"varint,4,opt,name=last_update_id,json=lastUpdateId,proto3" json:"last_update_id,omitempty"`               // 最后更新的订单簿ID
	PrevLastUpdateId int64         `protobuf:"varint,5,opt,name=prev_last_update_id,json=prevLastUpdateId,proto3" json:"prev_last_update_id,omitempty"` // 上一个订单簿ID
	Bids             []*PriceLevel `protobuf:"bytes,6,rep,name=bids,proto3" json:"bids,omitempty"`                                                      // 买单列表
	Asks             []*PriceLevel `protobuf:"bytes,7,rep,name=asks,proto3" json:"asks,omitempty"`                                                      // 卖单列表
}

func (x *DepthInfo) Reset() {
	*x = DepthInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quote_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepthInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepthInfo) ProtoMessage() {}

func (x *DepthInfo) ProtoReflect() protoreflect.Message {
	mi := &file_quote_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepthInfo.ProtoReflect.Descriptor instead.
func (*DepthInfo) Descriptor() ([]byte, []int) {
	return file_quote_common_proto_rawDescGZIP(), []int{0}
}

func (x *DepthInfo) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DepthInfo) GetTransTs() int64 {
	if x != nil {
		return x.TransTs
	}
	return 0
}

func (x *DepthInfo) GetFirstUpdateId() int64 {
	if x != nil {
		return x.FirstUpdateId
	}
	return 0
}

func (x *DepthInfo) GetLastUpdateId() int64 {
	if x != nil {
		return x.LastUpdateId
	}
	return 0
}

func (x *DepthInfo) GetPrevLastUpdateId() int64 {
	if x != nil {
		return x.PrevLastUpdateId
	}
	return 0
}

func (x *DepthInfo) GetBids() []*PriceLevel {
	if x != nil {
		return x.Bids
	}
	return nil
}

func (x *DepthInfo) GetAsks() []*PriceLevel {
	if x != nil {
		return x.Asks
	}
	return nil
}

type KlineInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp            int64   `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // 时间
	StartTime            int64   `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime              int64   `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Symbol               string  `protobuf:"bytes,4,opt,name=symbol,proto3" json:"symbol,omitempty"`                                                                // 交易对
	Interval             string  `protobuf:"bytes,5,opt,name=interval,proto3" json:"interval,omitempty"`                                                            // K线周期
	FirstTradeId         int64   `protobuf:"varint,6,opt,name=first_trade_id,json=firstTradeId,proto3" json:"first_trade_id,omitempty"`                             // 第一个交易ID
	LastTradeId          int64   `protobuf:"varint,7,opt,name=last_trade_id,json=lastTradeId,proto3" json:"last_trade_id,omitempty"`                                // 最后一个交易ID
	Open                 float64 `protobuf:"fixed64,8,opt,name=open,proto3" json:"open,omitempty"`                                                                  // 开盘价
	Close                float64 `protobuf:"fixed64,9,opt,name=close,proto3" json:"close,omitempty"`                                                                // 收盘价
	High                 float64 `protobuf:"fixed64,10,opt,name=high,proto3" json:"high,omitempty"`                                                                 // 最高价
	Low                  float64 `protobuf:"fixed64,11,opt,name=low,proto3" json:"low,omitempty"`                                                                   // 最低价
	Volume               float64 `protobuf:"fixed64,12,opt,name=volume,proto3" json:"volume,omitempty"`                                                             // 交易量
	TradeNum             int64   `protobuf:"varint,13,opt,name=trade_num,json=tradeNum,proto3" json:"trade_num,omitempty"`                                          // 交易笔数
	IsFinal              bool    `protobuf:"varint,14,opt,name=is_final,json=isFinal,proto3" json:"is_final,omitempty"`                                             // 是否是最后一条
	QuoteVolume          float64 `protobuf:"fixed64,15,opt,name=quote_volume,json=quoteVolume,proto3" json:"quote_volume,omitempty"`                                // 成交额
	ActiveBuyVolume      float64 `protobuf:"fixed64,16,opt,name=active_buy_volume,json=activeBuyVolume,proto3" json:"active_buy_volume,omitempty"`                  // 主动买量
	ActiveBuyQuoteVolume float64 `protobuf:"fixed64,17,opt,name=active_buy_quote_volume,json=activeBuyQuoteVolume,proto3" json:"active_buy_quote_volume,omitempty"` // 主动买额
}

func (x *KlineInfo) Reset() {
	*x = KlineInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quote_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KlineInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KlineInfo) ProtoMessage() {}

func (x *KlineInfo) ProtoReflect() protoreflect.Message {
	mi := &file_quote_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KlineInfo.ProtoReflect.Descriptor instead.
func (*KlineInfo) Descriptor() ([]byte, []int) {
	return file_quote_common_proto_rawDescGZIP(), []int{1}
}

func (x *KlineInfo) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *KlineInfo) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *KlineInfo) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *KlineInfo) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *KlineInfo) GetInterval() string {
	if x != nil {
		return x.Interval
	}
	return ""
}

func (x *KlineInfo) GetFirstTradeId() int64 {
	if x != nil {
		return x.FirstTradeId
	}
	return 0
}

func (x *KlineInfo) GetLastTradeId() int64 {
	if x != nil {
		return x.LastTradeId
	}
	return 0
}

func (x *KlineInfo) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *KlineInfo) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *KlineInfo) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *KlineInfo) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *KlineInfo) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *KlineInfo) GetTradeNum() int64 {
	if x != nil {
		return x.TradeNum
	}
	return 0
}

func (x *KlineInfo) GetIsFinal() bool {
	if x != nil {
		return x.IsFinal
	}
	return false
}

func (x *KlineInfo) GetQuoteVolume() float64 {
	if x != nil {
		return x.QuoteVolume
	}
	return 0
}

func (x *KlineInfo) GetActiveBuyVolume() float64 {
	if x != nil {
		return x.ActiveBuyVolume
	}
	return 0
}

func (x *KlineInfo) GetActiveBuyQuoteVolume() float64 {
	if x != nil {
		return x.ActiveBuyQuoteVolume
	}
	return 0
}

type AggTradeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp        int64   `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                         // 时间
	Symbol           string  `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`                                                // 交易对
	AggregateTradeId int64   `protobuf:"varint,3,opt,name=aggregate_trade_id,json=aggregateTradeId,proto3" json:"aggregate_trade_id,omitempty"` // 聚合交易ID
	Price            float64 `protobuf:"fixed64,4,opt,name=price,proto3" json:"price,omitempty"`                                                // 价格
	Quantity         float64 `protobuf:"fixed64,5,opt,name=quantity,proto3" json:"quantity,omitempty"`                                          // 数量
	FirstTradeId     int64   `protobuf:"varint,6,opt,name=first_trade_id,json=firstTradeId,proto3" json:"first_trade_id,omitempty"`             // 第一个交易ID
	LastTradeId      int64   `protobuf:"varint,7,opt,name=last_trade_id,json=lastTradeId,proto3" json:"last_trade_id,omitempty"`                // 最后一个交易ID
	TradeTime        int64   `protobuf:"varint,8,opt,name=trade_time,json=tradeTime,proto3" json:"trade_time,omitempty"`                        // 交易时间
	Maker            bool    `protobuf:"varint,9,opt,name=maker,proto3" json:"maker,omitempty"`                                                 // 是否是maker
}

func (x *AggTradeInfo) Reset() {
	*x = AggTradeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quote_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggTradeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggTradeInfo) ProtoMessage() {}

func (x *AggTradeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_quote_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggTradeInfo.ProtoReflect.Descriptor instead.
func (*AggTradeInfo) Descriptor() ([]byte, []int) {
	return file_quote_common_proto_rawDescGZIP(), []int{2}
}

func (x *AggTradeInfo) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *AggTradeInfo) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *AggTradeInfo) GetAggregateTradeId() int64 {
	if x != nil {
		return x.AggregateTradeId
	}
	return 0
}

func (x *AggTradeInfo) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *AggTradeInfo) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *AggTradeInfo) GetFirstTradeId() int64 {
	if x != nil {
		return x.FirstTradeId
	}
	return 0
}

func (x *AggTradeInfo) GetLastTradeId() int64 {
	if x != nil {
		return x.LastTradeId
	}
	return 0
}

func (x *AggTradeInfo) GetTradeTime() int64 {
	if x != nil {
		return x.TradeTime
	}
	return 0
}

func (x *AggTradeInfo) GetMaker() bool {
	if x != nil {
		return x.Maker
	}
	return false
}

var File_quote_common_proto protoreflect.FileDescriptor

var file_quote_common_proto_rawDesc = []byte{
	0x0a, 0x12, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x12, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x93, 0x02, 0x0a, 0x09, 0x44, 0x65, 0x70, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x66, 0x69, 0x72, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x72, 0x65, 0x76, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x62, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x04, 0x62, 0x69, 0x64, 0x73, 0x12, 0x27,
	0x0a, 0x04, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x52, 0x04, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x87, 0x04, 0x0a, 0x09, 0x4b, 0x6c, 0x69, 0x6e,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6f,
	0x70, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x75, 0x6d,
	0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x42, 0x75, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x42, 0x75, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x22, 0xa3, 0x02, 0x0a, 0x0c, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x42, 0x14, 0x5a, 0x12, 0x2e, 0x2e, 0x2f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x3b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_quote_common_proto_rawDescOnce sync.Once
	file_quote_common_proto_rawDescData = file_quote_common_proto_rawDesc
)

func file_quote_common_proto_rawDescGZIP() []byte {
	file_quote_common_proto_rawDescOnce.Do(func() {
		file_quote_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_quote_common_proto_rawDescData)
	})
	return file_quote_common_proto_rawDescData
}

var file_quote_common_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_quote_common_proto_goTypes = []any{
	(*DepthInfo)(nil),    // 0: message.DepthInfo
	(*KlineInfo)(nil),    // 1: message.KlineInfo
	(*AggTradeInfo)(nil), // 2: message.AggTradeInfo
	(*PriceLevel)(nil),   // 3: message.PriceLevel
}
var file_quote_common_proto_depIdxs = []int32{
	3, // 0: message.DepthInfo.bids:type_name -> message.PriceLevel
	3, // 1: message.DepthInfo.asks:type_name -> message.PriceLevel
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_quote_common_proto_init() }
func file_quote_common_proto_init() {
	if File_quote_common_proto != nil {
		return
	}
	file_quote_period_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_quote_common_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*DepthInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quote_common_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*KlineInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quote_common_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*AggTradeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_quote_common_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_quote_common_proto_goTypes,
		DependencyIndexes: file_quote_common_proto_depIdxs,
		MessageInfos:      file_quote_common_proto_msgTypes,
	}.Build()
	File_quote_common_proto = out.File
	file_quote_common_proto_rawDesc = nil
	file_quote_common_proto_goTypes = nil
	file_quote_common_proto_depIdxs = nil
}
